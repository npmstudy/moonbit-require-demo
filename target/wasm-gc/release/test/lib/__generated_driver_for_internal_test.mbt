
// Generated by moon test.

fn main {
  let tests : Array[(String, String, () -> Result[Unit, String])] = [

  ]
  let total = tests.length()
  let test_names = Array::make(total, "")
  let filenames = Array::make(total, "")
  let messages = Array::make(total, "")
  let mut succ_idx = total
  let mut fail_idx = 0
  for k = 0; k < tests.length(); k = k + 1 {
    let (filename, name, f) = tests[k]
    filenames[k] = filename
    let result = f()
    match result {
      Ok(_) => {
        succ_idx -= 1
        test_names[succ_idx] = name
      }
      Err(e) => {
        test_names[fail_idx] = name
        messages[fail_idx] = e
        fail_idx += 1
      }
    }
  }

  fn repr(obj: Array[String]) -> String {
    let buf = Buffer::make(10)
    obj.debug_write(buf)
    buf.to_string()
  }

  let filenames = repr(filenames)
  let test_names = repr(test_names)
  let messages = repr(messages)

  let passed = total - succ_idx
  println("----- BEGIN MOON TEST RESULT -----")
  println("{\"passed\": \(passed), \"package\": \"username/hello/lib\", \"filenames\": \(filenames), \"test_names\": \(test_names), \"messages\": \(messages)}")
  println("----- END MOON TEST RESULT -----")
}
